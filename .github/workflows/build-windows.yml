name: Windows Build

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  VCPKG_DIR: ${{ github.workspace }}/vcpkg
  QT_DIR: ${{ github.workspace }}/Qt/6.5.3/msvc2019_64

jobs:
  build-windows:
    name: Build for Windows
    runs-on: windows-latest

    steps:
    - name: Configure Git for Windows
      run: |
        # 允许长路径和特殊字符
        git config --global core.longpaths true
        git config --global core.protectNTFS false

    - name: Checkout code (with path filter)
      uses: actions/checkout@v4
      with:
        submodules: recursive
        sparse-checkout: |
          /*
          !tests/data/testAudioFileMatcher/04_Multi_disc_=>_CueFile_1.ape

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Qt via aqt
      run: |
        python -m pip install aqtinstall
        aqt install-qt windows desktop 6.5.3 win64_msvc2019_64 -O "${{ env.QT_DIR }}"
        aqt install-tool windows desktop tools_qtcreator qt.tools.windeployqt

    - name: Install build tools
      run: |
        choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        choco install -y ninja

    - name: Cache vcpkg
      uses: actions/cache@v3
      id: vcpkg-cache
      with:
        path: ${{ env.VCPKG_DIR }}
        key: vcpkg-${{ hashFiles('vcpkg.json') }}
        restore-keys: vcpkg-

    - name: Setup vcpkg
      if: steps.vcpkg-cache.outputs.cache-hit != 'true'
      run: |
        git clone https://github.com/microsoft/vcpkg.git ${{ env.VCPKG_DIR }}
        & "${{ env.VCPKG_DIR }}/bootstrap-vcpkg.bat"

    - name: Install dependencies
      run: |
        & "${{ env.VCPKG_DIR }}/vcpkg" install ^
            flac ^
            libsndfile ^
            taglib ^
            chromaprint

    - name: Configure CMake
      shell: cmd
      run: |
        cmake -B build -S . ^
          -G Ninja ^
          -DCMAKE_TOOLCHAIN_FILE="${{ env.VCPKG_DIR }}/scripts/buildsystems/vcpkg.cmake" ^
          -DCMAKE_PREFIX_PATH="${{ env.QT_DIR }}" ^
          -DCMAKE_BUILD_TYPE=Release

    - name: Build project
      run: cmake --build build --config Release --parallel

    - name: Deploy Qt libraries
      run: |
        "${{ env.QT_DIR }}/bin/windeployqt" ^
          build/Release/flacon.exe ^
          --release ^
          --no-compiler-runtime ^
          --dir build/deploy

    - name: Create portable package
      shell: powershell
      run: |
        Compress-Archive -Path build/deploy/* -DestinationPath flacon-portable.zip

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: flacon-windows
        path: flacon-portable.zip
